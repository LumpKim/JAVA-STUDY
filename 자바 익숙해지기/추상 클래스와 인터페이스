# 추상클래스와 인터페이스

## 추상 클래스

- 사전적 의미로 추상(abstract)은 실체 간 공통된 특성을 추출한 것을 뜻함

- 객체를 직접 생성할 수 있는 실체 클래스라고 한다면 공통적인 특성을 추출해 선언한 클래스를 추상 클래스라고 함

- 추상 클래스와 실체 클래스는 상속의 관계를 가지고 있음

  - 부모 클래스가 추상 클래스, 자식 클래스로는 실체 클래스로 구성
  - 실체 클래스는 추상 클래스의 모든 특성(필드와 메소드)을 물려받고, 추가적인 특성을 가질 수 있음

- 추상 클래스는 객체를 직접 생성해서 사용할 수 없음

  - 실체 클래스의 공통되는 필드와 메소드를 추출해서 만들었기 때문

  - **-> new 연산자를 사용해서 인스턴스를 생성할 수 없다**

    `class Ant extends Animan { ... }`

### 추상 클래스를 사용하는 목적

- 실체 클래스들의 공통된 필드와 메소드의 이름을 통일하기 위해
- 실체 클래스를 작성할 때 시간을 절약하기 위해
  - 여러 클래스들이 동일한 필드와 메소드를 가져야 할 경우, 추상 클래스로 설계 규격을 만듦

### 추상 클래스 선언

- 클래스를 선언할 때 `abstract` 키워드를 붙임
- new 연산자를 통해 객체를 생성하지 못하고, 상속을 통해서 자식 클래스만 만들 수 있음

------

## 인터페이스

- 자바에서 인터페이스(interface)는 객체의 사용 방법을 정의한 타입임
  - 객체의 교환성을 높여주어 다형성을 구현하는 매우 중요한 역할을 함
  - Ex) 자바8에서의 람다식(함수적 인터페이스의 구현 객체를 생성하기 때문)
- 개발 코드와 객체가 서로 통신하는 접점 역할을 함
  - 코드가 인터페이스의 메소드를 호출하면 인터페이스는 객체의 메소드를 호출함
  - 코드는 객체의 내부 구조를 알 필요가 없고 인터페이스의 메소드만 알고 있으면 됨

### 인터페이스를 사용하는 이유

- 코드를 수정하지 않고 사용하는 객체를 변경할 수 있도록 하기 위해서
- 하나의 객체가 아닌 여러 객체들과 사용이 가능하므로 사용하는 객체에 따라 반환값이 다름

### 인터페이스의 특징

- 선언할 때 class 대신 `interface` 키워드를 사용함
- 인터페이스는 상수와 메소드만을 구성 멤버로 가짐
  - 생성자를 가질 수 없음(객체로 생성할 수 없기 때문)

#### 인터페이스의 종류

- 상수 필드
  - 상수는 인터페이스에 고정된 값으로 런타임 시에 데이터를 바꿀 수 없음
  - 상수를 선언할 때에는 반드시 초기값을 대입해야 함
- 추상 메소드
  - 객체가 가지고 있는 메소드를 설명한 것
  - 호출할 때 어떤 인자가 필요하고, 반환 타입이 무엇인지만 알려줌
- 디폴트 메소드
  - 인터페이스에 선언되지만 구현 객체가 가지고 있는 인스턴스 메소드
- 정적 메소드
  - 디폴트 메소드와는 달리 객체가 없어도 인터페이스만으로 호출이 가능함

# 추상 클래스와 인터페이스의 차이점

- 추상 클래스
  - 추상클래스를 상속받아 기능을 이용하고 확장함
- 인터페이스
  - 함수의 껍데기만 있는데, 그 이유는 함수의 구현을 강제하게 위해서
  - 해당 인터페이스를 구현한 객체들에 대해서 동일한 동작을 약속하기 위해 존재
- 상속은 슈퍼클래스의 기능을 이용하거나 확장하기 위해서 사용되고, 다중 상속의 모호성 때문에 하나만 상속받을 수 있음

